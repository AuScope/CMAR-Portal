<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
		 xmlns:s="http://www.springframework.org/schema/security"
       	 xmlns:beans="http://www.springframework.org/schema/beans"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://www.springframework.org/schema/beans 
                             http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                             http://www.springframework.org/schema/security 
                             http://www.springframework.org/schema/security/spring-security-2.0.4.xsd">

   <beans:bean id="entryPoint" 
            class="org.springframework.security.ui.preauth.PreAuthenticatedProcessingFilterEntryPoint" >
   </beans:bean>
                                    
   <http auto-config="false" entry-point-ref="entryPoint" session-fixation-protection="none" access-denied-page="/access_error.html">
      <intercept-url pattern="/admin.html" access="ROLE_ADMINISTRATOR" />
 <!-- <intercept-url pattern="/downloadProxy\?urls**" access="ROLE_DOWNLOAD" /> -->
      <intercept-url pattern="/**" filters="none" />
      <concurrent-session-control max-sessions="1"/>
      <s:anonymous/>
      <!-- This is picked up by apache and redirected to the actual shib logout -->
      <s:logout logout-success-url="/ShibLogout"/>
   </http>

<!-- This is for reading user roles from a remote DB
   <authentication-manager alias="authenticationManager" />
   
   <beans:bean id="preAuthenticatedProcessingFilter" 
            class="org.auscope.portal.server.web.security.PreAuthenticatedProcessingFilter">
      <custom-filter position="PRE_AUTH_FILTER"/>
      <beans:property name="authenticationManager" ref="authenticationManager" />
   </beans:bean>


   <beans:bean id="preAuthenticatedAuthenticationProvider" 
            class="org.springframework.security.providers.preauth.PreAuthenticatedAuthenticationProvider">
      <custom-authentication-provider />
      <beans:property name="preAuthenticatedUserDetailsService">
         <beans:bean id="userDetailsServiceWrapper"   
                  class="org.springframework.security.userdetails.UserDetailsByNameServiceWrapper">
            <beans:property name="userDetailsService" ref="myUserDetailsService"/>
         </beans:bean>
      </beans:property>
   </beans:bean>   

   <authentication-provider user-service-ref='myUserDetailsService'/>


   <beans:bean id="myUserDetailsService" class="org.springframework.security.userdetails.jdbc.JdbcDaoImpl">
      <beans:property name="dataSource" ref="dataSource"/>
   </beans:bean>
   -->

   <!-- We use our own user details service so that we can assign ROLE_USER to users that authenticate with AAF but are unknown to us -->
   <beans:bean id="portalUserDetailsService" class="org.auscope.portal.server.web.security.PortalUserDetailsService">
   	  	<beans:constructor-arg index="0" value="ROLE_USER"/>
   	  	<beans:constructor-arg index="1">
   	  		<beans:list>
   	  			<!-- Josh.Vote@csiro.au -->
   				<beans:bean class="org.auscope.portal.server.web.security.PortalUser">
   					<beans:constructor-arg index="0" value="v04hL1lRsd91/d/HCDWBYqf2bYo="/>
   					<beans:constructor-arg index="1" value=""/>
   					<beans:constructor-arg index="2" value="ROLE_ADMINISTRATOR"/>			
   				</beans:bean> 	  			
   	  		</beans:list>
   	  	</beans:constructor-arg>
   </beans:bean>
   
   <authentication-provider user-service-ref="portalUserDetailsService"/>
 
   <authentication-manager alias="authenticationManager" />
   
   <beans:bean id="preAuthenticatedProcessingFilter" 
            class="org.auscope.portal.server.web.security.PreAuthenticatedProcessingFilter">
      <custom-filter position="PRE_AUTH_FILTER"/>
      <beans:property name="authenticationManager" ref="authenticationManager" />
   </beans:bean>

   <beans:bean id="preAuthenticatedAuthenticationProvider" 
            class="org.springframework.security.providers.preauth.PreAuthenticatedAuthenticationProvider">
      <custom-authentication-provider />
      <beans:property name="preAuthenticatedUserDetailsService">
         <beans:bean id="userDetailsServiceWrapper"   
                  class="org.springframework.security.userdetails.UserDetailsByNameServiceWrapper">
            <beans:property name="userDetailsService" ref="portalUserDetailsService"/>
         </beans:bean>
      </beans:property>
   </beans:bean>
   </beans:bean>
   

</beans:beans>